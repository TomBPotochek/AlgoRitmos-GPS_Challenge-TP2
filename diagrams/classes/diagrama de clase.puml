@startuml
'https://plantuml.com/class-diagram'
abstract class Vehiculo{
    {abstract} void atravesarCasilla(Casillero c)
    void mover(String direccion, Mapa mapa)
    void aplicarMovs(int penalizacion)
}
class CuatroPorCuatro{
     atravesarCasilla(Casillero c)
     void aplicarMovsPozo(int penalizacion)
}
class Moto{
     void atravesarCasilla(Casillero c) {
}
class Auto{
void atravesarCasilla(Casillero c)
}
class Posicion{
    fila : int
    columna : int
    void actualizarPosicion(String direccion)
    Posicion calcularPosicion(String direccion)
}

interface Casillero{
    void aplicarMovimientosExtra(Vehiculo vehiculo)
}
class Mapa{
    tablero : Casillero
    dimension : int
    asignarCasillero(Casillero casillero, Posicion pos)
    Casillero obetenerCasilla(Posicion posicion)
}

class Pozo implements Casillero{
    void aplicarMovimientosExtra(Vehiculo vehiculo))
}
class SinObstaculo implements Casillero{
    void aplicarMovimientosExtra((Vehiculo vehiculo)
}

class MovFactory{
    {static}Movimiento MovimientoConstruir(String direccion)
}

interface Movimiento{
    int moverFila(int columna)
    int moverColumna(int fila)
}
class MovArriba implements Movimiento{
    int : cantMovimientos
    int moverColumna(int columna)
    int moverFila(int columna)
}
class MovAbajo implements Movimiento{
    int : cantMovimientos
    int moverColumna(int columna)
    int moverFila(int columna)
}
class MovDerecha implements Movimiento{
    int : cantMovimientos
    int moverColumna(int columna)
    int moverFila(int columna)
}
class MovIzquierda implements Movimiento{
    int : cantMovimientos
    int moverColumna(int columna)
    int moverFila(int columna)
}

Mapa *-- "*" Casillero
Moto --|> Vehiculo
Auto --|> Vehiculo
CuatroPorCuatro --|> Vehiculo
Vehiculo ..> Mapa
Vehiculo *--Posicion

MovFactory "crea"..> Movimiento

Posicion "utiliza"..> MovFactory

@enduml