@startuml
'https://plantuml.com/class-diagram'
abstract class Vehiculo{
    # posicion : Posicion
    {abstract} atravesarCasilla(Casillero c)
    {abstract} BaseEfectoDecorador aceptar(ElementoMapa elemento)
    mover(Movimiento movimiento)
    estaEnPosicion(Posicion posicionAComparar)
    copiarPosicionA(Vehiculo vehiculo)
}
class CuatroPorCuatro{
    - pozosAtravesados : int
    +aceptar(ElementoMapa elemento)
    +pisarPozo()
    +pisoMasDeTresPozos()
}

class Auto{
 aceptar(ElementoMapa elemento)
}
class Posicion{
    - fila : int
    - columna : int
    actualizarPosicion(String direccion)
    calcularPosicion(String direccion)
}

interface Efecto{
    - AplicadorDeMovimientos : aplicador
    - Vehiculo : vehiculo
    +actualizar(int movimientosActuales)
    +Vehiculo cambiar()
}

class Mapa{
    - grilla : Casillero
    - alto : int
    - ancho : int
    asignarCasillero(Casillero casillero, Posicion pos)
    obetenerCasilla(Posicion posicion)
    verificarPosicionValida(Posicion pos)
}

interface Movimiento{
    +moverFila(int columna)
    +moverColumna(int fila)
}
class MovArriba implements Movimiento{
    -int : cantMovimientos
    +int moverColumna(int columna)
    +int moverFila(int columna)
}
class MovAbajo implements Movimiento{
    -int : cantMovimientos
    +int moverColumna(int columna)
    +int moverFila(int columna)
}
class MovDerecha implements Movimiento{
    -int : cantMovimientos
    +int moverColumna(int columna)
    +int moverFila(int columna)
}
class MovIzquierda implements Movimiento{
    -int : cantMovimientos
    +int moverColumna(int columna)
    +int moverFila(int columna)
}

class Jugador{
    - cantMovimientos : int
    + estaEnPosicion(Posicion unaPosicion)
    + cantidadDeMovimientosEs(int unEntero)
    + mover(Movimiento movimiento)
    - alcanzoMeta : Bool
}

class Juego{
    - nombre : Nombre
    + mover(Movimiento movimiento)
    + estaFinalizado()
    + obtenerNombre()
    + obtenerPuntaje()
}

class Turno{
    - juegoFinalizado : bool
    - jugadores : Jugador
    - colaJugadores : Jugador
    - turnoSiguiente()
    - jugadorActual()
    + mover((Movimiento movimiento)
    + todosfinalizados()
    + finalizarTurnosJugador()
    + obtenerPuntajeGanador()
}

interface Casillero{
 +atravesar(Vehiculo vehiculo)
}
interface ElementoMapa{
        BaseEfectoDecorador interactuar(Moto moto);
        BaseEfectoDecorador interactuar(Auto auto);
        BaseEfectoDecorador interactuar(CuatroPorCuatro cuatroPorCuatro);
}

interface Efecto{
    aplicarseSobre(Jugador jugador)
}

class EfectoCambioDeVehiculo implements Efecto{
+aplicarseSobre(Jugador jugador)
}
class EfectoCruzarMeta implements Efecto{
+aplicarseSobre(Jugador jugador)
}
class EfectoNulo implements Efecto{
+aplicarseSobre(Jugador jugador)
}
class EfectoSuma implements Efecto{
+aplicarseSobre(Jugador jugador)
}
class EfectoMultiplica implements Efecto{
+aplicarseSobre(Jugador jugador)
}


class CasilleroCalle implements Casillero{
+atravesar(Vehiculo vehiculo)
+agregarElemento(ElementoMapa elemento)
}
class CasilleroDecoratorMeta implements Casillero{}

class BaseEfectoDecorador implements Efecto{
    +aplicarseSobre(Jugador jugador)
}
class CasilleroDecoratorMeta{
+atravesar(Vehiculo vehiculo)
+agregarElemento(ElementoMapa elemento)
}

class Piquete implements ElementoMapa{
BaseEfectoDecorador interactuar(Moto moto);
        BaseEfectoDecorador interactuar(Auto auto);
        BaseEfectoDecorador interactuar(CuatroPorCuatro cuatroPorCuatro);
}
class Pozo implements ElementoMapa{
BaseEfectoDecorador interactuar(Moto moto);
        BaseEfectoDecorador interactuar(Auto auto);
        BaseEfectoDecorador interactuar(CuatroPorCuatro cuatroPorCuatro);
}

class SorpresaFavorable implements ElementoMapa{
BaseEfectoDecorador interactuar(Moto moto);
        BaseEfectoDecorador interactuar(Auto auto);
        BaseEfectoDecorador interactuar(CuatroPorCuatro cuatroPorCuatro);
}
class SorpresaCambioVehiculo implements ElementoMapa{
BaseEfectoDecorador interactuar(Moto moto);
        BaseEfectoDecorador interactuar(Auto auto);
        BaseEfectoDecorador interactuar(CuatroPorCuatro cuatroPorCuatro);
}

class Moto extends Vehiculo{
    aceptar(ElementoMapa elemento)
}
class Auto extends Vehiculo{
    aceptar(ElementoMapa elemento)
}

class Ranking{
    rank : Map
    jugadores : Ma
    registrarJugador(String : nombre, int : puntaje)
    obtenerRanking()
    obtenerPuntajeJugador(String : nombre)
}

Juego --> Ranking

Juego --> Turno

CuatroPorCuatro --|> Vehiculo

Vehiculo *--Posicion

Jugador <.. Movimiento

Jugador *--"1" Vehiculo
Jugador <.. "aplica" Efecto
CasilleroDecoratorMeta o-- Casillero

ElementoMapa ..> Vehiculo

Mapa --> Casillero
Turno "tiene"--> Jugador

CasilleroCalle --> ElementoMapa
CasilleroCalle <.. Efecto
@enduml